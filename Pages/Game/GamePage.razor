@using Kviz.Shared
@using Kviz.Services
@using Kviz.Model

@page "/game/{sessionId:int}/{nickname}"
@layout MainLayout
@inject QuizService quizService
@implements IDisposable

@if (UniqueName)
{
    @if (!game.StartGame)
    {
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width:100%; height:100vh;">
            <h3 style="color:white;">Waiting for host to start the game...</h3>
        </RadzenRow>
        
    }
    else
    {
        @if (!game.Closed)
        {
            @if (!game.CheckIfUserAlreadyAnswered(nickname!))
            {
                @if (game.GetCurrentQuestion().Type == QuestionType.MultipleChoice)
                {
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@game.GetCurrentQuestion().Text class="rz-color-white"></RadzenText>

                        </RadzenStack>
                        @foreach (Answer answer in game.GetCurrentAnswers())
                        {
                            <RadzenButton Variant="Variant.Outlined" Text="@answer.Text" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnAnswerSelect(answer))" />
                        }
                    </RadzenStack>
                }
                else if (game.GetCurrentQuestion().Type == QuestionType.ShortAnswer)
                {
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@game.GetCurrentQuestion().Text class="rz-color-white"></RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@game.TimeAsString class="rz-color-white"></RadzenText>

                        </RadzenStack>
                        <RadzenTextBox Placeholder="Type answer here..." Style="width: 90%" @bind-Value=@ShortAnswer />
                        <RadzenButton Variant="Variant.Outlined" Text="Submit" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnShortAnswerSubmit(ShortAnswer))" />
                    </RadzenStack>
                }

            }
            else
            {
                <RadzenText class="rz-color-series-3" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="Waiting for other players..." ></RadzenText>
            }
        }    
        else
        {
            if (game.CheckIfUserAnsweredCorrectly(nickname!))
            {
                <RadzenRow style="margin-top: 2rem; background-color: rgba(0,255,0,0.7); border-radius: 1rem;" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H2" TagName="TagName.H3" Text="Correct answer"></RadzenText>
                </RadzenRow>
                
            }
            else
            {
                <RadzenRow style="margin-top: 2rem; background-color: rgba(255,0,0,0.8); border-radius: 1rem;" JustifyContent="JustifyContent.Center">
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H2" TagName="TagName.H3" Text="Incorrect answer"></RadzenText>
                </RadzenRow>
            }

        }
        

    }
}
else
{
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width:100%; height:100vh;">
        <h3 style="color:white;">Your nickname must be unique</h3>
    </RadzenRow>
}



@code {
    [Parameter]
    public int sessionId { get; set; }
    [Parameter]
    public string? nickname { get; set; }
    bool ShowGame = true;
    bool UniqueName = false;
    string ShortAnswer = string.Empty;
    GameService game;

    protected override async Task OnInitializedAsync()
    {
        if (quizService.Sessions.ContainsKey(sessionId))
        {
            game = quizService.Sessions[sessionId];


            if (game.CheckIfNewUser(nickname!))
            {
                UniqueName = true;
                game.AddUser(nickname!);
                if (game.CheckIfFirstJoin(nickname!))
                {
                    game.userPoints.TryAdd(nickname!, 0);
                }
            }

            game.UpdateEvent += async () => await InvokeAsync(() => Update());
            game.NextQuestionEvent += async () => await InvokeAsync(() => NextQuestion());
            game.RevealAnswerEvent += async () => await InvokeAsync(() => RevealAnswer());
            game.StartGameEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.QuestionClosedEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.TimerCountEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.StateChangedEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            await base.OnInitializedAsync();
        }
    }

    void OnAnswerSelect(Answer answer)
    {
        game.AddToUserAnswers(answer, nickname!);
        game.AddToSubmittedAnswers(answer, nickname!);

    }
    void Update()
    {
        if (game.CheckIfUserAlreadyAnswered(nickname!))
        {
            this.StateHasChanged();
        }
    }
    void NextQuestion()
    {
        this.StateHasChanged();
    }
    void RevealAnswer()
    {
        this.StateHasChanged();
    }
    void OnShortAnswerSubmit(string text)
    {
        Answer answer = new Answer(text, game.GetCurrentQuestion().CheckIfAnswerIsCorrect(text));
        game.AddToUserAnswers(answer, nickname!);
        game.AddToSubmittedAnswers(answer, nickname!);
        
    }
    public void Dispose()
    {
        if (UniqueName)
        {
            game.RemoveUser(nickname!);
        }
    }

}
