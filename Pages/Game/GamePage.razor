@using Kviz.Shared
@using Kviz.Services
@using Kviz.Model

@page "/game/{sessionId:int}/{nickname}"
@layout MainLayout
@inject QuizService quizService
@implements IDisposable

@if (UniqueName)
{
    @if (!quizService.Sessions[sessionId].StartGame)
    {
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width:100%; height:100vh;">
            <h3 style="color:white;">Waiting for host to start the game...</h3>
        </RadzenRow>
        
    }
    else
    {
        @if (!quizService.Sessions[sessionId].Closed)
        {
            @if (!quizService.Sessions[sessionId].CheckIfUserAlreadyAnswered(nickname!))
            {
                @if (@quizService.Sessions[sessionId].GetCurrentQuestion().Type == QuestionType.MultipleChoice)
                {
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@quizService.Sessions[sessionId].GetCurrentQuestion().Text class="rz-color-white"></RadzenText>

                        </RadzenStack>
                        @foreach (Answer answer in quizService.Sessions[sessionId].GetCurrentAnswers())
                        {
                            <RadzenButton Variant="Variant.Outlined" Text="@answer.Text" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnAnswerSelect(answer))" />
                        }
                    </RadzenStack>
                }
                else if (@quizService.Sessions[sessionId].GetCurrentQuestion().Type == QuestionType.ShortAnswer)
                {
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@quizService.Sessions[sessionId].GetCurrentQuestion().Text class="rz-color-white"></RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@quizService.Sessions[sessionId].TimeAsString class="rz-color-white"></RadzenText>

                        </RadzenStack>
                        <RadzenTextBox Placeholder="Type answer here..." Style="width: 90%" @bind-Value=@ShortAnswer />
                        <RadzenButton Variant="Variant.Outlined" Text="Submit" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnShortAnswerSubmit(ShortAnswer))" />
                    </RadzenStack>
                }

            }
            else
            {
                <RadzenText class="rz-color-series-3" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="Waiting for other players..." ></RadzenText>
            }
        }    
        else
        {
            if (quizService.Sessions[sessionId].CheckIfUserAnsweredCorrectly(nickname!))
            {
                <RadzenRow style="margin-top: 2rem; background-color: rgba(0,255,0,0.7); border-radius: 1rem;" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H2" TagName="TagName.H3" Text="Correct answer"></RadzenText>
                </RadzenRow>
                
            }
            else
            {
                <RadzenRow style="margin-top: 2rem; background-color: rgba(255,0,0,0.8); border-radius: 1rem;" JustifyContent="JustifyContent.Center">
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H2" TagName="TagName.H3" Text="Incorrect answer"></RadzenText>
                </RadzenRow>
            }

        }
        

    }
}
else
{
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width:100%; height:100vh;">
        <h3 style="color:white;">Your nickname must be unique</h3>
    </RadzenRow>
}



@code {
    [Parameter]
    public int sessionId { get; set; }
    [Parameter]
    public string? nickname { get; set; }
    bool ShowGame = true;
    bool UniqueName = false;
    string ShortAnswer = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (quizService.Sessions[sessionId].CheckIfNewUser(nickname!))
        {
            UniqueName = true;
            quizService.Sessions[sessionId].AddUser(nickname!);
            if (quizService.Sessions[sessionId].CheckIfFirstJoin(nickname!))
            {
                quizService.Sessions[sessionId].userPoints.Add(nickname!, 0);
            }
        }

        quizService.Sessions[sessionId].UpdateEvent += async () => await InvokeAsync(() => Update());
        quizService.Sessions[sessionId].NextQuestionEvent += async () => await InvokeAsync(() => NextQuestion());
        quizService.Sessions[sessionId].RevealAnswerEvent += async () => await InvokeAsync(() => RevealAnswer());
        quizService.Sessions[sessionId].StartGameEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        quizService.Sessions[sessionId].QuestionClosedEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        quizService.Sessions[sessionId].TimerCountEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        quizService.Sessions[sessionId].StateChangedEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        await base.OnInitializedAsync();
    }

    void OnAnswerSelect(Answer answer)
    {
        quizService.Sessions[sessionId].AddToUserAnswers(answer, nickname!);
        quizService.Sessions[sessionId].AddToSubmittedAnswers(answer, nickname!);

    }
    void Update()
    {
        if (quizService.Sessions[sessionId].CheckIfUserAlreadyAnswered(nickname!))
        {
            this.StateHasChanged();
        }
    }
    void NextQuestion()
    {
        this.StateHasChanged();
    }
    void RevealAnswer()
    {
        this.StateHasChanged();
    }
    void OnShortAnswerSubmit(string text)
    {
        Answer answer = new Answer(text, quizService.Sessions[sessionId].GetCurrentQuestion().CheckIfAnswerIsCorrect(text));
        quizService.Sessions[sessionId].AddToUserAnswers(answer, nickname!);
        quizService.Sessions[sessionId].AddToSubmittedAnswers(answer, nickname!);
        
    }
    public void Dispose()
    {
        if (UniqueName)
        {
            quizService.Sessions[sessionId].RemoveUser(nickname!);
        }
    }

}
