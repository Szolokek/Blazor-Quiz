@using Kviz.Services
@using Kviz.Migrations.Tables
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@layout Shared.CreatorMenuLayout
@page "/creator"
@inject NavigationManager Navigation
@inject IDataService dataService
@inject QuizService quizService
@inject AuthenticationStateProvider authState;
<AuthorizeView>
    <Authorized>
        @if (@quizes == null)
        {
            <h3>Loading...</h3>
        }
        else
        {
            <RadzenRow class="rz-text-align-center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenColumn SizeSM="12" SizeMD="6" class="rz-p-5">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                        <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H3">Your Quizes:</RadzenText>
                        @foreach (QuizTable quiz in quizes)
                        {
                            <RadzenCard class="rz-border-color-series-2" style="width:90%; border-style:solid; padding: 1rem; border-radius: 1rem; background-color: rgb(120, 120, 120, 0.1);">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" >
                                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" Text="@quiz.Name"></RadzenText>
                                    <RadzenButton class="rz-ripple" Click=@(() => OnCreateSession(quiz.Id)) ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Outlined" Text="Create Session" />
                                    <RadzenButton class="rz-ripple" Click=@(() => OnEditQuiz(quiz)) Icon="edit" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Text" />
                                    <RadzenButton class="rz-ripple" Click=@(() => OnDeleteQuiz(quiz)) Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" />
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="12" SizeMD="5" class="rz-p-5">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                        <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H3">Your Sessions:</RadzenText>
                        @foreach (SessionTable session in sessions)
                        {
                            <div class="rz-border-color-danger-light" style="width:90%; border-style:solid; padding: 1rem; border-radius: 1rem; background-color: rgb(120, 120, 120, 0.1);">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@session.Id.ToString()"></RadzenText>
                                    <RadzenButton class="rz-ripple" Click=@(() => OnStartSession(session)) ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Outlined" Text="Start Session" />
                                </RadzenStack>
                            </div>
                        }
                    </RadzenStack>
                </RadzenColumn>
                
            </RadzenRow>
            
        }
    </Authorized>
</AuthorizeView>







@code {
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }
    List<QuizTable> quizes;
    List<SessionTable> sessions;
    private int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity!.IsAuthenticated)
        {
            var userId = int.Parse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value);
            sessions = await dataService.GetSessionsByUserId(userId);
            quizes = await dataService.GetQuizesByUserId(userId);
            UserId = userId;
        }
        await base.OnInitializedAsync();
    }

    void NavigateToEditor()
    {
        Navigation.NavigateTo("/creator/editor");
    }

    async void OnCreateSession(int Id)
    {
        int id = dataService.CreateSession(Id, UserId).Result;
        sessions = await dataService.GetSessionsByUserId(UserId);
        //quizService.Sessions.Add(id, new GameService());
        //TODO make it so that the session is registered in the quizservice after creation.

    }
    void OnEditQuiz(QuizTable quiz)
    {
        Navigation.NavigateTo($"/creator/editor/{quiz.Id}");
    }
    void OnDeleteQuiz(QuizTable quiz)
    {

    }
    void OnStartSession(SessionTable session)
    {
        Navigation.NavigateTo($"/creator/game/{session.Id}");
    }

   

}
