@using Kviz.Shared
@using Kviz.Services
@using Kviz.Model
@using Kviz.Migrations.Tables
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@using System.Collections.Concurrent;


@page "/creator/game/{sessionId:int}"
@layout MainLayout
@inject QuizService quizService
@inject IDataService dataService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authState;
<AuthorizeView>
    <Authorized>
        @if (AuthorizedUser)
        {
            @if (!@game.GameOver)
            {
                        
    
                @if (!@game.StartGame)
                {
                    <RadzenButton Variant="Variant.Outlined" Text="Start Quiz" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnStartQuiz())" />
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="Users:"></RadzenText>
                    <RadzenRow>
                        @foreach (string user in game.users)
                        {
                            <RadzenColumn Size="1">
                                <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@user"></RadzenText>
                            </RadzenColumn>
                        }
                    </RadzenRow>
                
                }
                else
                {
                    @if (quiz != null)
                    {


                        @if (game.leaderBoardView)
                        {
                            <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="Leaderboard:"></RadzenText>
                            <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@game.LeaderBoardUpTimeAsString></RadzenText>
                            <RadzenStack JustifyContent="JustifyContent.Center">
                            @foreach (KeyValuePair<string, int> entry in (from entry in game.userPoints orderby entry.Value descending select entry).ToDictionary(pair => pair.Key, pair => pair.Value).Take(5))
                                {
                                    <RadzenRow Gap="0.1rem" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                        <RadzenCard Style="width:70%; background-color: rgb(120, 120, 120, 0.3); margin-bottom: 1rem; text-align: center;">
                                            <RadzenRow JustifyContent="JustifyContent.Center">
                                                <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@entry.Key></RadzenText>
                                                <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=":"></RadzenText>
                                                <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@entry.Value.ToString()></RadzenText>
                                            </RadzenRow>
                                        
                                        </RadzenCard>
                                    </RadzenRow>
                                }
                            </RadzenStack>
                        }
                        else
                        {
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="10" >
                                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H3" TagName="TagName.H3" Text=@game.GetCurrentQuestion().Text></RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="1">
                                    <RadzenRow>
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Text="Time: " class="rz-color-white"></RadzenText>
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@game.TimeAsString class="rz-color-white"></RadzenText>
                                    </RadzenRow>
                                </RadzenColumn>
                                <RadzenColumn Size="1">
                                    <RadzenRow Gap="0">
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@game.GetSubmittedAnswers().Count.ToString() class="rz-color-white"></RadzenText>
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Text="/" class="rz-color-white"></RadzenText>
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@game.users.Count.ToString() class="rz-color-white"></RadzenText>
                                    </RadzenRow>
                                </RadzenColumn>
                            </RadzenRow>
                        
                        
                            @if (@game.GetCurrentQuestion().Type == QuestionType.MultipleChoice)
                            {
                                @foreach (Answer answer in game.GetCurrentAnswers())
                                {
                                    <RadzenRow JustifyContent="JustifyContent.Center">
                                        <RadzenCard Style=@AnswerCardStyle(answer.Correct)>
                                            <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@answer.Text></RadzenText>
                                        </RadzenCard>
                                    </RadzenRow>
                                
                                }
                            }
                            else if (@game.GetCurrentQuestion().Type == QuestionType.ShortAnswer)
                            {
                            
                            }

                            <RadzenChart>
                                <RadzenColumnSeries Data="chartData" CategoryProperty="Text" LineType="LineType.Dashed" ValueProperty="Size" >
                                    <RadzenSeriesDataLabels Visible="true" />
                                    <RadzenAxisTitle Text="Answers"/>
                                    <RadzenCategoryAxis Visible="@CategoryAxisVisibility()"></RadzenCategoryAxis>
                                </RadzenColumnSeries>
                                <RadzenColumnOptions Radius="2"/>
                            </RadzenChart>
                        }
                        <RadzenButton Variant="Variant.Outlined" Text="Reveal Answer" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnRevealAnswerAsnyc())" Disabled=@RevealAnswerButtonDisabled />
                        <RadzenButton Variant="Variant.Outlined" Text="Next Question" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnNextQuestionAsync())" />
                    }
                }
                
            }
            else
            {
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H2" TagName="TagName.H3" Text="Game Over"></RadzenText>
                </RadzenRow>
                <RadzenStack JustifyContent="JustifyContent.Center">
                    @foreach (KeyValuePair<string, int> entry in (from entry in game.userPoints orderby entry.Value descending select entry).ToDictionary(pair => pair.Key, pair => pair.Value).Take(5))
                    {
                        <RadzenRow Gap="0.1rem" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                            <RadzenCard Style="width:70%; background-color: rgb(120, 120, 120, 0.3); margin-bottom: 1rem; text-align: center;">
                                <RadzenRow>
                                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@entry.Key></RadzenText>
                                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=":"></RadzenText>
                                    <RadzenText class="rz-color-white" TextStyle="TextStyle.H5" TagName="TagName.H3" Text=@entry.Value.ToString()></RadzenText>
                                </RadzenRow>
                            </RadzenCard>
                        </RadzenRow>
                    }
                </RadzenStack>
                <RadzenButton Variant="Variant.Outlined" Text="Back to menu" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="@(() => Navigation.NavigateTo("/creator"))" />

            }
        }
        else
        {
            <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width:100%; height:100vh;">
                <h3 style="color:white;">You are not authorized to host this session!</h3>
            </RadzenRow>
        }

       
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int sessionId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }
    Quiz? quiz = null;
    int questionIndex = 0;
    bool RevealAnswerButtonDisabled = false;
    bool AuthorizedUser = false;
    int userId;
    int quizHistoryId;
    List<DataItem> chartData = new List<DataItem>();
    GameService game;


    protected override async Task OnInitializedAsync()
    {
        if (quizService.Sessions.ContainsKey(sessionId))
        {
            game = quizService.Sessions[sessionId];

            game.TimesUpEvent += async () => await InvokeAsync(() => OnRevealAnswerAsnyc());
            game.LeaderboardEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.NextQuestionEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.TimerCountEvent += async () => await InvokeAsync(() => OnTimerTick());
            game.NewUserEvent += async () => await InvokeAsync(() => this.StateHasChanged());
            game.GameOverEvent += async () => await InvokeAsync(() => this.StateHasChanged());

            GetChartSeries();
            await AuthorizeUser();
            await base.OnInitializedAsync();
        }
    }

    public async Task AuthorizeUser()
    {
        SessionTable sessionTable = await dataService.GetSessionById(sessionId);
        var user = (await AuthState).User;
        if (user.Identity!.IsAuthenticated)
        {
            userId = int.Parse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value);
            if (userId == sessionTable.User_Id)
            {
                AuthorizedUser = true;
            }
        }
    }

    async Task OnRevealAnswerAsnyc()
    {
        RevealAnswerButtonDisabled = true;
        this.StateHasChanged();
        game.RevealAnswer();

    }
    async Task OnNextQuestionAsync()
    {
        game.CloseQuestion();
        await SaveToHistory();
        RevealAnswerButtonDisabled = false;
    }
    async void OnStartQuiz()
    {
        SessionTable sessionTable = await dataService.GetSessionById(sessionId);
        quiz = await dataService.GetQuizByIdAsync(sessionTable.Quiz_Id);
        game.StartGameFirstQuestion(quiz);
        game.StartGame = true;
        quizHistoryId = await dataService.InitHistory(quiz.Name, sessionId, userId);
    }
    class DataItem
    {
        public string Text { get; set; }
        public int Size { get; set; }
    }

    void GetChartSeries()
    {
        ConcurrentDictionary<Answer, List<string>> dict = game.UserAnswers;
        chartData.Clear();
        if (dict != null)
        {
            foreach (var key in dict.Keys)
            {
                chartData.Add( new DataItem()
                    {
                        Text = key.Text,
                        Size = dict[key].Count
                    });
            }
        }
        chartData = chartData.ToList();
    }
    void GetChartSeriesTemp()
    {
        ConcurrentDictionary<Answer, List<string>> dict = game.UserAnswers;
        chartData.Clear();

        for(int i = 0; i< 1; i++)
        {
            chartData.Add(new DataItem()
                    {
                        Text = "new",
                        Size = 2
                    });
        }

        chartData = chartData.ToList();
    }

    void OnTimerTick()
    {
        GetChartSeries();
        this.StateHasChanged();
    }

    async Task SaveToHistory()
    {
        await dataService.SaveToHistory(quizHistoryId, game.GetCurrentQuestion(), game.GetSubmittedAnswers());
    }

    public bool CategoryAxisVisibility()
    {
        if (game.Closed)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public string AnswerCardStyle(bool correct)
    {
        if (!game.Closed)
        {
            return "width:70%; background-color: rgb(120, 120, 120, 0.3); margin-bottom: 1rem; text-align: center;";
        }
        else
        {
            if (correct)
            {
                return "width:70%; background-color: rgb(0, 255, 0, 0.5); margin-bottom: 1rem; text-align: center;";
            }
            else
            {
                return "width:70%; background-color: rgb(120, 120, 120, 0.3); margin-bottom: 1rem; text-align: center;";
            }
        }
    }
}
