@using Kviz.Shared
@using Kviz.Services
@using Kviz.Model
@using Kviz.Migrations.Tables
@using Microsoft.AspNetCore.Components.Authorization


@page "/creator/game/{sessionIdString}"
@layout MainLayout
@inject QuizService quizService
@inject IDataService dataService
<AuthorizeView>
    <Authorized>
        @if (!@quizService.Sessions[sessionId].StartGame)
        {
            <RadzenButton Variant="Variant.Outlined" Text="Start Quiz" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnStartQuiz())" />
        }
        else
        {
            @if (quiz != null)
            {

                
                @if (quizService.Sessions[sessionId].leaderBoardView)
                {
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="Leaderboard:"></RadzenText>
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@quizService.Sessions[sessionId].LeaderBoardUpTimeAsString></RadzenText>
                    @foreach (KeyValuePair<string, int> entry in quizService.Sessions[sessionId].userPoints.OrderBy(pair => pair.Value).ToDictionary(pair => pair.Key, pair => pair.Value).Take(5))
                    {
                        <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=entry.Key></RadzenText>
                        <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=": "></RadzenText>
                        <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=entry.Value></RadzenText>
                    }
                    
                }
                else
                {
                    <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@quizService.Sessions[sessionId].GetCurrentQuestion().Text></RadzenText>
                    @foreach (Answer answer in quizService.Sessions[sessionId].GetCurrentAnswers())
                    {
                        <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@answer.Text></RadzenText>
                    }
                    <RadzenChart>
                        <RadzenColumnSeries Data="@GetChartSeries(quizService.Sessions[sessionId].UserAnswers)" CategoryProperty="Text" LineType="LineType.Dashed" ValueProperty="Size">
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenColumnSeries>
                        <RadzenColumnOptions Radius="5" />
                    </RadzenChart>
                }
                <RadzenButton Variant="Variant.Outlined" Text="Reveal Answer" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnRevealAnswer())" />
                <RadzenButton Variant="Variant.Outlined" Text="Next Question" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" Style="margin: 10px;" Click="(() => OnNextQuestion())" />
                }
                
            @*@foreach (KeyValuePair<Answer, List<string>> entry in quizService.Sessions[sessionId].UserAnswers)
            {
                <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@entry.Key.Text></RadzenText>
                @foreach (string user in entry.Value)
                {
                    <RadzenText class="rz-color-series-3" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@user></RadzenText>
                }
            }
            @*<RadzenChart>
        <RadzenColumnSeries Data="@quizService.Sessions[Int32.Parse(sessionId)].UserAnswers." TItem="" CategoryProperty="Quarter" Title="Answers" LineType="LineType.Dashed" ValueProperty="Revenue">
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5" />
        <RadzenValueAxis>
        <RadzenGridLines Visible="true" />
        <RadzenAxisTitle Text="Number of votes" />
        </RadzenValueAxis>
        </RadzenChart>*@
        @*}
        @foreach (KeyValuePair<Answer, List<string>> entry in quizService.Sessions[sessionId].UserAnswers)
        {
            @if (entry.Key.Correct)
            {
                <RadzenText class="rz-color-success-light" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@entry.Key.Text></RadzenText>
            }
            else
            {
                <RadzenText class="rz-color-white" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@entry.Key.Text></RadzenText>
            }
            @foreach (string user in entry.Value)
            {
                <RadzenText class="rz-color-series-3" TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text=@user></RadzenText>
            }
        }*@
        }
       
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? sessionIdString { get; set; }
    public int sessionId;
    Quiz? quiz = null;
    int questionIndex = 0;
    bool RevealAnswerButtonVisibility = true;


    protected override void OnInitialized()
    {
        sessionId = Int32.Parse(sessionIdString!);
        quizService.Sessions[sessionId].TimesUpEvent += async () => await InvokeAsync(() => OnRevealAnswer());
        quizService.Sessions[sessionId].LeaderboardEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        quizService.Sessions[sessionId].NextQuestionEvent += async () => await InvokeAsync(() => this.StateHasChanged());
        base.OnInitialized();
    }

    void OnRevealAnswer()
    {
        RevealAnswerButtonVisibility = false;
        this.StateHasChanged();
        quizService.Sessions[sessionId].RevealAnswer();
    }
    void OnNextQuestion()
    {
        quizService.Sessions[sessionId].CloseQuestion();
    }
    async void OnStartQuiz()
    {
        SessionTable sessionTable = await dataService.GetSessionById(sessionId);
        quiz = await dataService.GetQuizByIdAsync(sessionTable.Quiz_Id);
        quizService.Sessions[sessionId].StartGameFirstQuestion(quiz);
        quizService.Sessions[sessionId].StartGame = true;
    }
    class DataItem
    {
        public string Text { get; set; }
        public int Size { get; set; }
    }

    IEnumerable<DataItem> GetChartSeries(Dictionary<Answer, List<string>> dict)
    {
        if (dict != null)
        {
            foreach (var key in dict.Keys)
            {
                yield return new DataItem()
                    {
                        Text = key.Text,
                        Size = dict[key].Count
                    };
            }
        }
    }
}
